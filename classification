import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import statsmodels.formula.api as sm
import statsmodels.api as sm
from sklearn.metrics import r2_score
import matplotlib.pyplot as plt
import seaborn as sns
from mlxtend.feature_selection import SequentialFeatureSelector as sfs
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import classification_report, confusion_matrix

def cunf(y_pred,df_name ):
    
    cm=np.array(confusion_matrix(y_test, y_pred,labels=[1,0]))
    globals()[str(df_name)] = pd.DataFrame(cm, index=["is_buy","not buy"],
                              columns=["predict_buy","predict not buy"])


dataset = pd.read_csv('dataset.csv')

sns.countplot(dataset['Purchased'], label = "Count")

X=dataset.drop(['Purchased'], axis = 1) 
y=dataset['Purchased']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2,
random_state = 20)

#normalizing data
X_train_min=X_train.min()
X_test_min=X_test.min()
X_train_range=(X_train - X_train_min).max()
X_test_range=(X_test - X_test_min).max()
X_train_scaled = (X_train - X_train_min)/X_train_range
X_test_scaled = (X_test - X_test_min)/X_test_range

from sklearn.model_selection import  RandomizedSearchCV
from numpy import arange
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.linear_model import LogisticRegression
from sklearn.svm import LinearSVC
from sklearn.svm import SVC
scores = []

cv = RepeatedStratifiedKFold(n_splits=100, random_state=0)
   
model_params = {
    'KNeighbors_Classifier': {
        'model': KNeighborsClassifier(),
        'params' : {
            'n_neighbors': [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
        }  
    },
    'logistic_classifier': {
        'model': LogisticRegression(),
        'params' : {
        }  
    
    },
    'linearSVC_classifier': {
        'model': LinearSVC(),
        'params' : {
        }  
    
    }, 
    # 'PolynomialSVC_classifier': {
    #     'model': SVC(),
    #     'params' : {
    #         'kernel': 'poly',
    #         'degree': [2,3,4,5]
    #     }  
    
    # },
    'GaussianSVC_classifier': {
        'model': SVC(),
        'params' : {
            'C':[ 0.2,0.5,1.2,1.8,3]
                
        }  
    
    },
}
 

from sklearn.metrics import f1_score, make_scorer

f1 = make_scorer(f1_score , average='macro')  
    
for model_name, mp in model_params.items():
    clf = RandomizedSearchCV(mp['model'], mp['params'], cv=cv, return_train_score=False,random_state=1,scoring=f1)
    clf.fit(X, y)
    cv_results=clf.cv_results_
    scores.append({
        'model': model_name,
        'best_score': clf.best_score_,
        'mean_test_score': cv_results['mean_test_score'],
        'std_test_score': cv_results['std_test_score'],
        'best_params': clf.best_params_
    })
    
    
df = pd.DataFrame(scores,columns=['model','best_score','best_params','mean_test_score','std_test_score'])

######################################### knn ##################################

knn_model=KNeighborsClassifier(n_neighbors=df.iloc[0]['best_params']['n_neighbors'])
knn_model.fit(X_train_scaled,y_train)
y_pred_knn=knn_model.predict(X_test_scaled)
df_name='knn_cunf_table'
cunf(y_pred_knn,df_name)

########################################logistig##############################

Logistic_model=LogisticRegression()
Logistic_model.fit(X_train_scaled,y_train)
y_pred_Logistic=Logistic_model.predict(X_test_scaled)
df_name='Logistic_cunf_table'
cunf(y_pred_Logistic,df_name)

###################################### linear SVC ##############################

Linear_model=LinearSVC()
Linear_model.fit(X_train_scaled,y_train)
y_pred_Linear=Linear_model.predict(X_test_scaled)
df_name='Linear_cunf_table'
cunf(y_pred_Linear,df_name)

################################### gous SVC #####################################

gous_model=SVC(C=df.iloc[3]['best_params']['C'])
gous_model.fit(X_train_scaled,y_train)
y_pred_gous=gous_model.predict(X_test_scaled)
df_name='gous_cunf_table'
cunf(y_pred_gous,df_name)

print(knn_cunf_table)
print(Logistic_cunf_table)
print(Linear_cunf_table)
